<project name="TOD" default="jar" basedir=".">

    <target name="init">
		<property name="version" value="dev"/>
    	
        <property name="build.dir" value="${basedir}/build"/>
        <property name="lib.dir" value="${basedir}/lib"/>
        <property name="src-agent.dir" value="${basedir}/src/agent"/>
        <property name="src-debugger.dir" value="${basedir}/src/debugger"/>
        <property name="src-test.dir" value="${basedir}/src/test"/>
        <property name="src-testcase.dir" value="${basedir}/src/testcase"/>
        <property name="resources.dir" value="${basedir}/resources"/>
        <property name="classes-agent.dir" value="${basedir}/classes-agent"/>
        <property name="classes-debugger.dir" value="${basedir}/classes-debugger"/>
        <property name="classes-test.dir" value="${basedir}/classes-test"/>
        <property name="classes-testcase.dir" value="${basedir}/classes-testcase"/>
    	
        <property name="zz.utils.dir" value="${basedir}/../zz.utils"/>
        <property name="reflex.dir" value="${basedir}/../reflex"/>
        <property name="pom.dir" value="${basedir}/../pom"/>

    	
        <path id="agent.classpath">
            <pathelement path="${lib.dir}/asm-all-3.0.jar"/>
        </path>
    	
        <path id="debugger.classpath">
            <pathelement path="${lib.dir}/zz.utils.jar"/>
        	<pathelement path="${classes-agent.dir}"/>
            <pathelement path="${lib.dir}/asm-all-3.0.jar"/>
            <pathelement path="${lib.dir}/lucene-core-2.0.0.jar"/>
            <pathelement path="${lib.dir}/reflex-core.jar"/>
            <pathelement path="${lib.dir}/javassist.jar"/>
            <pathelement path="${lib.dir}/pom.jar"/>
            <pathelement path="${lib.dir}/javafxrt.jar"/>
        </path>
    	
        <path id="test.classpath">
            <pathelement path="${lib.dir}/zz.utils.jar"/>
        	<pathelement path="${classes-agent.dir}"/>
        	<pathelement path="${classes-debugger.dir}"/>
            <pathelement path="${lib.dir}/junit-4.1.jar"/>
            <pathelement path="${lib.dir}/pom.jar"/>
        </path>

    </target>

    <target name="clean" depends="init">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.dir}"/>
            <fileset dir="${classes-agent.dir}"/>
            <fileset dir="${classes-debugger.dir}"/>
            <fileset dir="${classes-test.dir}"/>
            <fileset dir="${classes-testcase.dir}"/>
        	
        	<fileset file="${lib.dir}/zz.utils.jar"/>
        </delete>
    </target>

    <target name="compile-agent" depends="init, dep.all">
        <mkdir dir="${classes-agent.dir}"/>
        <javac compiler="javac1.5" source="1.5" target="1.5"
        	debug="yes" nowarn="yes"
            srcdir="${src-agent.dir}"
            destdir="${classes-agent.dir}"
            classpathref="agent.classpath"/>
    </target>

    <target name="compile-debugger" depends="init, dep.all, compile-agent">
        <mkdir dir="${classes-debugger.dir}"/>
    	
        <javac 
        	debug="yes" nowarn="yes"
            srcdir="${src-debugger.dir}"
            destdir="${classes-debugger.dir}"
            classpathref="debugger.classpath"/>
    	
    	<copy todir="${classes-debugger.dir}">
    		<fileset dir="${resources.dir}"/>
    	</copy>
    </target>
	
    <target name="compile-test" depends="init, dep.all, compile-agent, compile-debugger">
        <mkdir dir="${classes-test.dir}"/>
        <javac 
        	debug="yes" nowarn="yes"
            srcdir="${src-test.dir}"
            destdir="${classes-test.dir}"
            classpathref="test.classpath"/>
    </target>
	
    <target name="compile-testcase" depends="init, dep.all">
        <mkdir dir="${classes-testcase.dir}"/>
        <javac 
        	debug="yes" nowarn="yes"
            srcdir="${src-testcase.dir}"
            destdir="${classes-testcase.dir}"
            classpathref="debugger.classpath"/>
    </target>
	
	<target name="compile" depends="compile-agent, compile-debugger, compile-test, compile-testcase"/>
	
	<target name="rmic" depends="compile">
		<rmic 
			base="${classes-debugger.dir}" 
			classpathref="debugger.classpath">
			
			<include name="tod/impl/dbgrid/GridMaster.class"/>
			<include name="tod/impl/dbgrid/aggregator/QueryAggregator.class"/>
			<include name="tod/impl/dbgrid/dbnode/DatabaseNode.class"/>
			<include name="tod/impl/dbgrid/dbnode/NodeEventIterator.class"/>
			<include name="tod/impl/dbgrid/GridLogBrowser.class"/>
			<include name="tod/utils/remote/RemoteLocationsRepository.class"/>
			
		</rmic>
	</target>

	<target name="jar" depends="compile">
        <mkdir dir="${build.dir}"/>
		<jar destfile="${build.dir}/tod-agent.jar" basedir="${classes-agent.dir}"/>
		<jar destfile="${build.dir}/tod-debugger.jar" basedir="${classes-debugger.dir}"/>
		<jar destfile="${build.dir}/tod-test.jar" basedir="${classes-test.dir}"/>
		<jar destfile="${build.dir}/tod-testcase.jar" basedir="${classes-testcase.dir}"/>
		
		<!--
		<jar destfile="${build.dir}/reflex-bridge.jar" 
			basedir="${classes-debugger.dir}"
			includes="tod/ReflexBridge.class">

			<manifest>
				<attribute name="Premain-Class" value="tod.ReflexBridge" />
			</manifest>

		</jar>
		-->
	</target>
		
	<target name="dep.zz.utils" depends="init">
		<ant 
			antfile="${zz.utils.dir}/build.xml" 
			dir="${zz.utils.dir}" 
			target="jar"
			inheritall="false"/>
		<echo message="Finished building zz.utils"/>
		<copy todir="lib">
			<fileset dir="${zz.utils.dir}/build" includes="zz.utils.jar"/>
		</copy>
	</target>
	
	<target name="dep.reflex" depends="init">
		<echo message="Building reflex..."/>
		<ant 
			antfile="${reflex.dir}/build.xml" 
			dir="${reflex.dir}" 
			target="jar"
			inheritall="false"/>
		<echo message="Finished building reflex"/>
		<copy todir="lib">
			<fileset dir="${reflex.dir}/build" includes="reflex-core.jar"/>
		</copy>
	</target>
	
	<target name="dep.pom" depends="init">
		<echo message="Building pom..."/>
		<ant 
			antfile="${pom.dir}/build.xml" 
			dir="${pom.dir}" 
			target="jar"
			inheritall="false"/>
		<echo message="Finished building pom"/>
		<copy todir="lib">
			<fileset dir="${pom.dir}/build" includes="pom.jar"/>
		</copy>
	</target>
	
	
	<target name="dep.all" depends="dep.zz.utils"/>
</project>